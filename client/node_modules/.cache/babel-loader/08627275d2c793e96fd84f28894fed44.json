{"ast":null,"code":"var _jsxFileName = \"/Users/diminiki/Desktop/dimitri-nik/client/src/components/Tabs/TabWeather.js\";\nimport React from 'react';\nimport $ from 'jquery';\nimport { Jumbotron, Spinner, Button, ButtonGroup } from 'reactstrap';\nexport default class TabWeather extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toC = this.toC.bind(this);\n    this.toF = this.toF.bind(this);\n    this.getWeather = this.getWeather.bind(this);\n    this.state = {\n      loading: true,\n      units: 'F'\n    };\n    navigator.geolocation.getCurrentPosition(this.getWeather);\n  }\n\n  getWeather(position) {\n    var lat = position.coords.latitude;\n    var lng = position.coords.longitude;\n    var format = \"imperial\";\n    $.getJSON(\"https://api.openweathermap.org/data/2.5/find?lat=\" + lat + \"&lon=\" + lng + \"&units=\" + format + \"&appid=906353eb2cac78688bff837c0bcfa352\").then(response => this.setState({\n      city: response.list[0].name,\n      temp: Math.round(response.list[0].main.temp),\n      tempf: Math.round(response.list[0].main.temp),\n      tempc: Math.round((response.list[0].main.temp - 32) * (5 / 9)),\n      desc: response.list[0].weather[0].description,\n      icon: \"http://openweathermap.org/img/w/\" + response.list[0].weather[0].icon + \".png\",\n      loading: false\n    }));\n  }\n\n  toC() {\n    if (this.state.units === 'F') {\n      this.setState({\n        temp: this.state.tempc,\n        units: 'C'\n      });\n    }\n  }\n\n  toF() {\n    if (this.state.units === 'C') {\n      this.setState({\n        temp: this.state.tempf,\n        units: 'F'\n      });\n    }\n  }\n\n  render() {\n    var _this$state = this.state,\n        desc = _this$state.desc,\n        temp = _this$state.temp,\n        city = _this$state.city,\n        icon = _this$state.icon,\n        loading = _this$state.loading,\n        units = _this$state.units;\n\n    if (loading) {\n      return React.createElement(\"div\", {\n        id: \"spinner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        style: {\n          width: '5rem',\n          height: '5rem'\n        },\n        type: \"grow\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(Jumbotron, {\n      fluid: true,\n      id: \"weatherbox\",\n      style: {\n        backgroundImage: \"url(\" + icon + \")\",\n        backgroundSize: \"15vh\",\n        backgroundRepeat: \"round\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      fluid: \"true\",\n      id: \"weatherarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"lead\",\n      id: \"temp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"  \", temp, \"\\xB0 \", units, \" \"), React.createElement(\"p\", {\n      className: \"lead\",\n      id: \"city\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"  \", city), React.createElement(\"p\", {\n      className: \"lead\",\n      id: \"weatherdesc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"  \", desc), React.createElement(ButtonGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.toC,\n      color: \"warning\",\n      id: \"degreeC\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \" C \"), React.createElement(Button, {\n      onClick: this.toF,\n      color: \"info\",\n      id: \"degreeF\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \" F \"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/diminiki/Desktop/dimitri-nik/client/src/components/Tabs/TabWeather.js"],"names":["React","$","Jumbotron","Spinner","Button","ButtonGroup","TabWeather","Component","constructor","props","toC","bind","toF","getWeather","state","loading","units","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","format","getJSON","then","response","setState","city","list","name","temp","Math","round","main","tempf","tempc","desc","weather","description","icon","render","width","height","backgroundImage","backgroundSize","backgroundRepeat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\nimport { Jumbotron, Spinner, Button, ButtonGroup } from 'reactstrap';\n\nexport default class TabWeather extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toC = this.toC.bind(this);\n    this.toF = this.toF.bind(this);\n    this.getWeather = this.getWeather.bind(this);\n\n    this.state = {\n      loading: true,\n      units: 'F',\n    };\n    navigator.geolocation.getCurrentPosition(this.getWeather);\n  }\n\n  getWeather(position) {\n    var lat = position.coords.latitude;\n    var lng = position.coords.longitude;\n    var format = \"imperial\";\n    $.getJSON(\"https://api.openweathermap.org/data/2.5/find?lat=\"+lat+\"&lon=\"+lng+\"&units=\"+format+\"&appid=906353eb2cac78688bff837c0bcfa352\")\n      .then(\n        response => this.setState({\n        city: response.list[0].name,\n        temp: Math.round(response.list[0].main.temp),\n        tempf: Math.round(response.list[0].main.temp),\n        tempc: Math.round(((response.list[0].main.temp) - 32) * (5/9)),\n        desc: response.list[0].weather[0].description,\n        icon: \"http://openweathermap.org/img/w/\" + response.list[0].weather[0].icon + \".png\",\n        loading: false\n      }));\n  }\n\n  toC() {\n    if (this.state.units === 'F') {\n      this.setState({\n        temp: this.state.tempc,\n        units: 'C'\n      });\n    }\n  }\n\n  toF() {\n    if (this.state.units === 'C') {\n      this.setState({\n        temp: this.state.tempf,\n        units: 'F'\n      });\n    }\n  }\n\n  render() {\n    var {desc, temp, city, icon, loading, units} = this.state;\n    if (loading) {\n      return (\n        <div id = \"spinner\">\n          <Spinner style={{ width: '5rem', height:\n          '5rem'}} type=\"grow\" color = \"primary\" />\n        </div>\n      )\n    }\n    return (\n        <Jumbotron fluid id=\"weatherbox\" style={{\n          backgroundImage: \"url(\"+icon+\")\",\n          backgroundSize: \"15vh\",\n          backgroundRepeat: \"round\"\n        }}>\n          <div fluid=\"true\" id=\"weatherarea\" >\n            <p className = \"lead\" id = \"temp\">  {temp}&#176; {units} </p>\n            <p className = \"lead\" id = \"city\">  {city}</p>\n            <p className = \"lead\" id = \"weatherdesc\">  {desc}</p>\n            <ButtonGroup>\n              <Button onClick={this.toC} color=\"warning\" id = \"degreeC\"> C </Button>\n              <Button onClick={this.toF} color=\"info\" id = \"degreeF\"> F </Button>\n            </ButtonGroup>\n          </div>\n        </Jumbotron>\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}