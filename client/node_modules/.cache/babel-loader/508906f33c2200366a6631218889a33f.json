{"ast":null,"code":"var _jsxFileName = \"/Users/diminiki/Desktop/dimitri-nik/client/src/components/Tabs/TabQuoteGenerator.js\";\nimport React from 'react';\nimport { Button, ButtonGroup, Jumbotron, Spinner } from 'reactstrap';\nimport $ from 'jquery';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\nexport default class TabQuoteGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getQuote = this.getQuote.bind(this);\n    this.handleLeft = this.handleLeft.bind(this);\n    this.handleRight = this.handleRight.bind(this);\n    this.state = {\n      quote: {\n        text: \"\\\"It's always sunny above the clouds.\\\"\",\n        author: \"\"\n      },\n      quotes: [{\n        'text': \"\\\"It's always sunny above the clouds.\\\"\",\n        'author': \"\"\n      }],\n      pos: 0,\n      loading: false\n    };\n  }\n\n  getQuote() {\n    $.getJSON(\"https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=jsonp&jsonp=?\").then(data => this.setState({\n      quote: {\n        text: \"\\\"\" + data[\"quoteText\"] + \"\\\"\",\n        author: \"-\" + data[\"quoteAuthor\"]\n      },\n      quotes: [...this.state.quotes, {\n        'text': \"\\\"\" + data[\"quoteText\"] + \"\\\"\",\n        'author': \"-\" + data[\"quoteAuthor\"]\n      }],\n      pos: this.state.quotes.length + 1,\n      loading: false\n    }));\n  }\n\n  handleLeft() {\n    if (this.state.pos > 1) {\n      this.setState({\n        pos: this.state.pos - 1,\n        quote: this.state.quotes[this.state.pos - 2]\n      });\n    }\n  }\n\n  handleRight() {\n    if (this.state.pos < this.state.quotes.length) {\n      this.setState({\n        pos: this.state.pos + 1,\n        quote: this.state.quotes[this.state.pos]\n      });\n    } else this.getQuote();\n  }\n\n  render() {\n    var _this$state = this.state,\n        quote = _this$state.quote,\n        loading = _this$state.loading;\n    if (quote.author === \"-\") quote.author = \"-Anonymous\";\n\n    if (loading) {\n      return React.createElement(\"div\", {\n        id: \"spinner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        style: {\n          width: '5rem',\n          height: '5rem'\n        },\n        type: \"grow\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      id: \"quotes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      size: \"lg\",\n      block: true,\n      onClick: this.getQuote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \" New Quote \"), React.createElement(Jumbotron, {\n      fluid: true,\n      id: \"quotebox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"quotearea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"lead\",\n      id: \"quote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \" \", quote.text), React.createElement(\"p\", {\n      className: \"lead\",\n      id: \"author\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \" \", quote.author))), React.createElement(ButtonGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleLeft,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faChevronLeft,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(Button, {\n      onClick: this.handleRight,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/diminiki/Desktop/dimitri-nik/client/src/components/Tabs/TabQuoteGenerator.js"],"names":["React","Button","ButtonGroup","Jumbotron","Spinner","$","FontAwesomeIcon","faChevronRight","faChevronLeft","TabQuoteGenerator","Component","constructor","props","getQuote","bind","handleLeft","handleRight","state","quote","text","author","quotes","pos","loading","getJSON","then","data","setState","length","render","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, ButtonGroup, Jumbotron, Spinner } from 'reactstrap';\nimport $ from 'jquery';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\n\nexport default class TabQuoteGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getQuote = this.getQuote.bind(this);\n    this.handleLeft = this.handleLeft.bind(this);\n    this.handleRight = this.handleRight.bind(this);\n\n    this.state = {\n      quote: {\n        text: \"\\\"It's always sunny above the clouds.\\\"\",\n        author: \"\"\n      },\n      quotes: [{\n        'text': \"\\\"It's always sunny above the clouds.\\\"\",\n        'author': \"\"\n      }],\n      pos: 0,\n      loading: false\n    };\n  }\n\n  getQuote() {\n    $.getJSON(\"https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=jsonp&jsonp=?\")\n      .then(data => this.setState({\n        quote: {\n          text: \"\\\"\" + data[\"quoteText\"]+\"\\\"\",\n          author: \"-\" + data[\"quoteAuthor\"],\n        },\n          quotes: [...this.state.quotes, {\n            'text': \"\\\"\" + data[\"quoteText\"]+\"\\\"\",\n            'author': \"-\" + data[\"quoteAuthor\"]\n          }],\n          pos: this.state.quotes.length + 1,\n          loading: false\n      }));\n  }\n\n  handleLeft() {\n    if (this.state.pos > 1) {\n      this.setState({\n        pos: this.state.pos - 1,\n        quote: this.state.quotes[this.state.pos - 2]\n      });\n    }\n  }\n\n  handleRight() {\n    if (this.state.pos < this.state.quotes.length) {\n      this.setState({\n        pos: this.state.pos + 1,\n        quote: this.state.quotes[this.state.pos]\n      });\n    }\n    else this.getQuote();\n  }\n\n  render() {\n    var {quote, loading} = this.state;\n    if (quote.author === \"-\") quote.author = \"-Anonymous\";\n    if (loading) {\n      return (\n        <div id = \"spinner\">\n          <Spinner style={{ width: '5rem', height:\n          '5rem'}} type=\"grow\" color = \"primary\" />\n        </div>\n      )\n    }\n    return (\n      <div id=\"quotes\">\n        <Button color=\"primary\" size=\"lg\" block onClick={this.getQuote}> New Quote </Button>\n        <Jumbotron fluid id=\"quotebox\">\n          <div id=\"quotearea\">\n            <p className = \"lead\" id = \"quote\"> {quote.text}</p>\n            <p className = \"lead\" id = \"author\"> {quote.author}</p>\n          </div>\n        </Jumbotron>\n        <ButtonGroup>\n          <Button onClick = {this.handleLeft} color=\"primary\">\n            <FontAwesomeIcon icon = {faChevronLeft} />\n          </Button>\n          <Button onClick = {this.handleRight} color=\"primary\">\n            <FontAwesomeIcon icon = {faChevronRight} />\n          </Button>\n        </ButtonGroup>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}